// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smERP.Infrastructure.Data;

#nullable disable

namespace smERP.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240723192630_AddingThumbnailAndFullscreenToCompany")]
    partial class AddingThumbnailAndFullscreenToCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchManagerId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullscreenCoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullscreenLogoImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailCoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailLogoImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentHeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentHeadId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("StorageLocation");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductAttribute", b =>
                {
                    b.Property<int>("ProductSkuId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductSkuId", "AttributeValueId");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSKU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountedPrice")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductSKUNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSKUNumber")
                        .IsUnique();

                    b.ToTable("ProductSKUs");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSKUImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("ProductSkuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductSkuId");

                    b.ToTable("ProductSKUImage");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("FirstTimeSupplied")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LastTimeSupplied")
                        .HasColumnType("date");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSuppliers");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.BaseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountInCents")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int?>("TotalAmountInCents")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BaseTransactions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.SensitiveDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("EncryptedContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("SensitiveDocuments");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.TransactionChange", b =>
                {
                    b.Property<int>("TransactionChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionChangeId"));

                    b.Property<int>("BaseTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("TransactionChangeId");

                    b.HasIndex("BaseTransactionId");

                    b.ToTable("TransactionChanges");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.TransactionDocument", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("SensitiveDocumentId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId", "SensitiveDocumentId");

                    b.HasIndex("SensitiveDocumentId");

                    b.ToTable("TransactionDocuments");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.TransactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountInCents")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("PricePerUnitInCents")
                        .HasColumnType("int");

                    b.Property<int>("ProductSkuId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("UsableQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseTransactionId");

                    b.ToTable("TransactionItems");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.BaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddrsCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddrsDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddrsState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddrsStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalAmountOwedInCents")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.BuyTransaction", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.Transactions.BaseTransaction");

                    b.Property<int>("BaseTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("BaseTransactionId");

                    b.HasIndex("StorageLocationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BuyTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.Transactions.BaseTransaction");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReferencingTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReferencingTransactionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.ProductMoveTransaction", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.Transactions.BaseTransaction");

                    b.Property<string>("FromEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FromStorageLocationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ToEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ToStorageLocationId")
                        .HasColumnType("int");

                    b.HasIndex("FromEmployeeId");

                    b.HasIndex("FromStorageLocationId");

                    b.HasIndex("ToEmployeeId");

                    b.HasIndex("ToStorageLocationId");

                    b.ToTable("ProductMoveTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.SellTransaction", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.Transactions.BaseTransaction");

                    b.Property<int>("BaseTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.HasIndex("BaseTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("SellTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Customer", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.User.BaseUser");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Employee", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.User.BaseUser");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryInCents")
                        .HasColumnType("int");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Supplier", b =>
                {
                    b.HasBaseType("smERP.Domain.Entities.User.BaseUser");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Branch", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.Employee", "BranchManager")
                        .WithMany()
                        .HasForeignKey("BranchManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Organization.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchManager");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Department", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.Employee", "DepartmentHead")
                        .WithMany()
                        .HasForeignKey("DepartmentHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentHead");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.StorageLocation", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.AttributeValue", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Attribute", null)
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Category", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductAttribute", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.AttributeValue", "AttributeValue")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Product.ProductSKU", "ProductSKU")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductSkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("Product");

                    b.Navigation("ProductSKU");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSKU", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductSKUs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSKUImage", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.ProductSKU", "ProductSKU")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductSkuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductSKU");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSupplier", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.Supplier", "Supplier")
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.BaseTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.SensitiveDocument", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.Employee", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.TransactionChange", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", "BaseTransaction")
                        .WithMany("TransactionChanges")
                        .HasForeignKey("BaseTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTransaction");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.TransactionDocument", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Transactions.SensitiveDocument", "SensitiveDocument")
                        .WithMany()
                        .HasForeignKey("SensitiveDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", "Transaction")
                        .WithMany("TransactionDocuments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensitiveDocument");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.TransactionItem", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", "BaseTransaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("BaseTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTransaction");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.BuyTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", "BaseTransaction")
                        .WithMany()
                        .HasForeignKey("BaseTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.Transactions.BuyTransaction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTransaction");

                    b.Navigation("StorageLocation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.PaymentTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.Transactions.PaymentTransaction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", "ReferencingTransaction")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("ReferencingTransactionId");

                    b.HasOne("smERP.Domain.Entities.User.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Customer");

                    b.Navigation("ReferencingTransaction");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.ProductMoveTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.Employee", "FromEmployee")
                        .WithMany()
                        .HasForeignKey("FromEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "FromStorageLocation")
                        .WithMany()
                        .HasForeignKey("FromStorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.Transactions.ProductMoveTransaction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.Employee", "ToEmployee")
                        .WithMany()
                        .HasForeignKey("ToEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "ToStorageLocation")
                        .WithMany()
                        .HasForeignKey("ToStorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromEmployee");

                    b.Navigation("FromStorageLocation");

                    b.Navigation("ToEmployee");

                    b.Navigation("ToStorageLocation");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.SellTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", "BaseTransaction")
                        .WithMany()
                        .HasForeignKey("BaseTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Transactions.BaseTransaction", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.Transactions.SellTransaction", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTransaction");

                    b.Navigation("Customer");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Customer", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.User.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Employee", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.Branch", "Branch")
                        .WithMany("BranchEmployees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Organization.Department", "Department")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.User.Employee", "EmployeeManager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("EmployeeManagerId");

                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.User.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Department");

                    b.Navigation("EmployeeManager");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Supplier", b =>
                {
                    b.HasOne("smERP.Domain.Entities.User.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("smERP.Domain.Entities.User.Supplier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Branch", b =>
                {
                    b.Navigation("BranchEmployees");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Department", b =>
                {
                    b.Navigation("DepartmentEmployees");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Attribute", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.AttributeValue", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductSKUs");

                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSKU", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Transactions.BaseTransaction", b =>
                {
                    b.Navigation("TransactionChanges");

                    b.Navigation("TransactionDocuments");

                    b.Navigation("TransactionItems");

                    b.Navigation("TransactionPayments");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Employee", b =>
                {
                    b.Navigation("ManagedEmployees");
                });

            modelBuilder.Entity("smERP.Domain.Entities.User.Supplier", b =>
                {
                    b.Navigation("SuppliedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
